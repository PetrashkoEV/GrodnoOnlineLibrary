@model DigitalResourcesLibrary.Models.AdvancedSearchViewModel
@{
    ViewBag.Title = "Posts";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="posts">
    @using (Html.BeginForm())
    {
        <div class="navbar">
            <div class="navbar-inner">
                <form class="navbar-search pull-left">
                    @Html.TextBoxFor(model => model.TextSearch, null, new
                    {
                        @class = "search-query",
                        placeholder = "Search",
                        id = "autocompleteRepository"
                    })
                </form>
                @Html.TextBoxFor(item => item.FormatDocSelect, null, new { @class = "documentsSelect" })
                @Html.TextBoxFor(item => item.TagSelect, null, new { @class = "tagSelect" })
                <button class="btn" type="submit">@ViewRes.Resource.Shared_Menu_Search</button>
            </div>
        </div>
       
    }

    <select id="tags" class="multiselect" multiple="multiple">
        <option value="multiselect-all">Select all</option>
        @foreach (var tag in Model.Tags)
        {
            <option value="@tag.Name">@tag.Name</option>
        }
    </select>

    <select id="format" class="multiselect" multiple="multiple">
        @foreach (var doc in Model.FormatDocuments)
        {
            <option value="@doc">@doc</option>
        }
    </select>

    <div class="chosentree"></div>

</div>
@Html.Partial("Template/LeftPanel", Model)
<div style="clear: both;"></div>

<script type='text/javascript'>
        var maxDepth = 3;
        var loadChildren = function (node, level) {
/*            var hasChildren = node.level < maxDepth;
            for (var i = 0; i < 8; i++) {
                var id = node.id + (i + 1).toString();
                node.children.push({
                    id: id,
                    title: 'Node ' + id,
                    has_children: hasChildren,
                    level: node.level + 1,
                    children: []
                });
                if (hasChildren && level < 2) {
                    loadChildren(node.children[i], (level + 1));
                }
            }*/
            node = getCategory(node.id, node);
            return node;
        };

        function getCategory(id, node) {
            var result = $.ajax({
                type: "POST",
                url: "/Search/СhildrenCategory",
                data: "id=" + id,
                async: false
            }).responseText;
            var obj = jQuery.parseJSON(result);
            for (var i = 0; i < obj.length; i++) {
                node.children.push({
                    id: obj[i].Id,
                    title: obj[i].Name,
                    has_children: obj[i].Subcategory.length,
                    level: node.level + 1,
                    children: []
                });
            }
            return node;
        }
    </script>
